"""
FastPanel Automation GUI
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ FastPanel
"""

import customtkinter as ctk
from typing import Optional, Dict, List
import json
from pathlib import Path
from datetime import datetime
import threading
import queue
from PIL import Image
import os
import sys
import webbrowser

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ src/ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from src.services.fastpanel import FastPanelService
from src.core.ssh_manager import quick_execute 
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")


class ServerCard(ctk.CTkFrame):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"""

    def __init__(self, parent, server_data: dict, on_click=None, **kwargs):
        super().__init__(parent, **kwargs)
        self.server_data = server_data
        self.on_click = on_click
        self.configure(
            corner_radius=10,
            fg_color=("#ffffff", "#2b2b2b"),
            border_width=1,
            border_color=("#e0e0e0", "#404040")
        )
        self._create_widgets()

    def _create_widgets(self):
        main_frame = ctk.CTkFrame(self, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=15, pady=12)

        top_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        top_frame.pack(fill="x", pady=(0, 8))

        server_icon = ctk.CTkLabel(top_frame, text="üñ•Ô∏è", font=ctk.CTkFont(size=24))
        server_icon.pack(side="left", padx=(0, 10))

        info_frame = ctk.CTkFrame(top_frame, fg_color="transparent")
        info_frame.pack(side="left", fill="x", expand=True)

        name_label = ctk.CTkLabel(info_frame, text=self.server_data.get("name", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"), font=ctk.CTkFont(size=16, weight="bold"), anchor="w")
        name_label.pack(fill="x")

        ip_label = ctk.CTkLabel(info_frame, text=f"IP: {self.server_data.get('ip', '–ù–µ —É–∫–∞–∑–∞–Ω')}", font=ctk.CTkFont(size=12), text_color=("#666666", "#aaaaaa"), anchor="w")
        ip_label.pack(fill="x")

        status_frame = ctk.CTkFrame(top_frame, fg_color="transparent")
        status_frame.pack(side="right")

        if self.server_data.get("fastpanel_installed"):
            status_badge = ctk.CTkLabel(status_frame, text="‚úÖ FastPanel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", font=ctk.CTkFont(size=11), fg_color=("#4caf50", "#2e7d32"), corner_radius=5, text_color="white")
        else:
            status_badge = ctk.CTkLabel(status_frame, text="‚è≥ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", font=ctk.CTkFont(size=11), fg_color=("#ff9800", "#f57c00"), corner_radius=5, text_color="white")
        status_badge.pack(padx=8, pady=4)

        separator = ctk.CTkFrame(main_frame, height=1, fg_color=("#e0e0e0", "#404040"))
        separator.pack(fill="x", pady=8)

        bottom_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        bottom_frame.pack(fill="x")

        if self.server_data.get("fastpanel_installed"):
            manage_btn = ctk.CTkButton(bottom_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", width=100, height=28, font=ctk.CTkFont(size=12), command=self._on_manage)
            manage_btn.pack(side="left", padx=(0, 5))
            panel_btn = ctk.CTkButton(bottom_frame, text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å", width=100, height=28, font=ctk.CTkFont(size=12), fg_color=("#4caf50", "#2e7d32"), hover_color=("#45a049", "#1b5e20"), command=self._open_panel)
            panel_btn.pack(side="left", padx=5)
        else:
            install_btn = ctk.CTkButton(bottom_frame, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FastPanel", width=150, height=28, font=ctk.CTkFont(size=12), fg_color=("#2196f3", "#1976d2"), hover_color=("#1976d2", "#1565c0"), command=self._on_install)
            install_btn.pack(side="left")

        delete_btn = ctk.CTkButton(bottom_frame, text="üóëÔ∏è", width=30, height=28, fg_color=("#f44336", "#d32f2f"), hover_color=("#da190b", "#b71c1c"), command=self._on_delete)
        delete_btn.pack(side="right")

        if self.server_data.get("created_at"):
            date_label = ctk.CTkLabel(bottom_frame, text=f"–î–æ–±–∞–≤–ª–µ–Ω: {self.server_data['created_at'][:10]}", font=ctk.CTkFont(size=10), text_color=("#999999", "#666666"))
            date_label.pack(side="right", padx=(0, 10))

    def _on_manage(self):
        if self.on_click: self.on_click("manage", self.server_data)
    def _on_install(self):
        if self.on_click: self.on_click("install", self.server_data)
    def _open_panel(self):
        if self.on_click: self.on_click("open_panel", self.server_data)
    def _on_delete(self):
        if self.on_click: self.on_click("delete", self.server_data)


class FastPanelApp(ctk.CTk):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        super().__init__()
        self.title("FastPanel Automation")
        self.geometry("1200x700")
        self.minsize(1000, 600)
        self.center_window()

        self.servers = []
        self.current_tab = "servers"

        self._create_widgets()
        self.load_servers()

        self.progress_queue = queue.Queue()
        self.after(100, self.process_queue)

    def process_queue(self):
        try:
            while not self.progress_queue.empty():
                message = self.progress_queue.get_nowait()
                msg_type = message.get("type")
                data = message.get("data")

                if msg_type == "progress":
                    progress, text = data
                    self.install_dialog.progress.set(progress / 100)
                    self.install_dialog.progress_label.configure(text=text)
                    self.install_dialog.log_text.insert("end", f"[{datetime.now().strftime('%H:%M:%S')}] {text}\n")
                elif msg_type == "log":
                    self.install_dialog.log_text.insert("end", f"  > {data}\n")
                elif msg_type == "error":
                    self.install_dialog.log_text.insert("end", f"\n‚ùå –û–®–ò–ë–ö–ê: {data}\n", "error")
                    self.show_error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {data[:50]}...")
                elif msg_type == "success":
                    self._complete_installation(data)
                    self.show_success("FastPanel —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                
                if hasattr(self, 'install_dialog') and self.install_dialog.winfo_exists():
                     self.install_dialog.log_text.see("end")

        except queue.Empty:
            pass
        finally:
            self.after(100, self.process_queue)

    def start_installation(self, server_data, password, dialog):
        self.install_dialog = dialog
        self.install_dialog.log_text.tag_config("error", foreground="red")
        self.install_dialog.log_text.delete("1.0", "end")

        def installation_task():
            service = FastPanelService()
            def callback(msg_type, *args):
                self.progress_queue.put({"type": msg_type, "data": args})

            service.install(
                host=server_data['ip'],
                username=server_data.get('ssh_user', 'root'),
                password=password,
                port=server_data.get('ssh_port', 22),
                callback=callback
            )

        thread = threading.Thread(target=installation_task, daemon=True)
        thread.start()

    def _complete_installation(self, result_data):
        found_server = False
        for server in self.servers:
            if server["ip"] == result_data['admin_url'].split('//')[1].split(':')[0]:
                server.update({
                    "fastpanel_installed": True,
                    "admin_url": result_data['admin_url'],
                    "admin_login": result_data.get('admin_login'),
                    "admin_password": result_data['admin_password'],
                    "install_date": result_data['install_date']
                })
                found_server = True
                break
        
        if found_server:
            self.save_servers()
            self.refresh_data()
            if hasattr(self, 'install_dialog') and self.install_dialog.winfo_exists():
                self.install_dialog.destroy()
        else:
            self.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

    def center_window(self):
        self.update_idletasks()
        width, height = 1200, 700
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f'{width}x{height}+{x}+{y}')

    def _create_widgets(self):
        main_container = ctk.CTkFrame(self, fg_color="transparent")
        main_container.pack(fill="both", expand=True)
        self._create_sidebar(main_container)
        self.content_frame = ctk.CTkFrame(main_container, fg_color=("#f5f5f5", "#1a1a1a"), corner_radius=0)
        self.content_frame.pack(side="right", fill="both", expand=True)
        self._create_header()
        self.tab_container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        self.tab_container.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        self.show_servers_tab()

    def _create_sidebar(self, parent):
        self.sidebar = ctk.CTkFrame(parent, width=250, fg_color=("#ffffff", "#2b2b2b"), corner_radius=0)
        self.sidebar.pack(side="left", fill="y")
        self.sidebar.pack_propagate(False)

        logo_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        logo_frame.pack(fill="x", padx=20, pady=20)
        ctk.CTkLabel(logo_frame, text="üöÄ FastPanel", font=ctk.CTkFont(size=24, weight="bold")).pack()
        ctk.CTkLabel(logo_frame, text="Automation Tool", font=ctk.CTkFont(size=12), text_color=("#666666", "#aaaaaa")).pack()

        ctk.CTkFrame(self.sidebar, height=2, fg_color=("#e0e0e0", "#404040")).pack(fill="x", padx=20, pady=10)

        nav_buttons = [
            ("üñ•Ô∏è", "–°–µ—Ä–≤–µ—Ä—ã", self.show_servers_tab),
            ("‚ûï", "–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", self.show_add_server_tab),
            ("‚òÅÔ∏è", "Cloudflare", self.show_cloudflare_tab),
            ("üîß", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.show_settings_tab),
            ("üìä", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", self.show_monitoring_tab),
            ("üìù", "–õ–æ–≥–∏", self.show_logs_tab)
        ]

        for icon, text, command in nav_buttons:
            btn = ctk.CTkButton(self.sidebar, text=f"{icon}  {text}", font=ctk.CTkFont(size=14), height=40, fg_color="transparent", text_color=("#000000", "#ffffff"), hover_color=("#e0e0e0", "#404040"), anchor="w", command=command)
            btn.pack(fill="x", padx=15, pady=2)

        info_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        info_frame.pack(side="bottom", fill="x", padx=20, pady=20)
        ctk.CTkLabel(info_frame, text="Version 0.2.0", font=ctk.CTkFont(size=10), text_color=("#999999", "#666666")).pack()
        self.status_label = ctk.CTkLabel(info_frame, text="‚óè –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", font=ctk.CTkFont(size=11), text_color=("#4caf50", "#4caf50"))
        self.status_label.pack(pady=(5, 0))

    def _create_header(self):
        header_frame = ctk.CTkFrame(self.content_frame, height=80, fg_color="transparent")
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        header_frame.pack_propagate(False)
        self.page_title = ctk.CTkLabel(header_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", font=ctk.CTkFont(size=28, weight="bold"))
        self.page_title.pack(side="left")
        refresh_btn = ctk.CTkButton(header_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", width=100, height=32, font=ctk.CTkFont(size=12), fg_color=("#2196f3", "#1976d2"), hover_color=("#1976d2", "#1565c0"), command=self.refresh_data)
        refresh_btn.pack(side="right", padx=(10, 0))
        self.search_entry = ctk.CTkEntry(header_frame, placeholder_text="üîç –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...", width=250, height=32, font=ctk.CTkFont(size=12))
        self.search_entry.pack(side="right", padx=10)

    def show_servers_tab(self):
        self.clear_tab_container()
        self.page_title.configure(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏")
        self.current_tab = "servers"
        scrollable = ctk.CTkScrollableFrame(self.tab_container, fg_color="transparent")
        scrollable.pack(fill="both", expand=True)

        if not self.servers:
            empty_frame = ctk.CTkFrame(scrollable, fg_color="transparent")
            empty_frame.pack(expand=True, pady=50)
            ctk.CTkLabel(empty_frame, text="üì≠", font=ctk.CTkFont(size=64)).pack()
            ctk.CTkLabel(empty_frame, text="–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤", font=ctk.CTkFont(size=18, weight="bold")).pack(pady=(20, 10))
            ctk.CTkLabel(empty_frame, text="–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", font=ctk.CTkFont(size=14), text_color=("#666666", "#aaaaaa")).pack()
            ctk.CTkButton(empty_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", font=ctk.CTkFont(size=14), width=200, height=40, command=self.show_add_server_tab).pack(pady=20)
        else:
            for server in self.servers:
                ServerCard(scrollable, server, on_click=self.handle_server_action).pack(fill="x", pady=5)
    
    # ... Other show_..._tab methods can be copied from your file ...
    def show_add_server_tab(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        self.clear_tab_container()
        self.page_title.configure(text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        self.current_tab = "add_server"
        
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        form_frame = ctk.CTkFrame(
            self.tab_container,
            fg_color=("#ffffff", "#2b2b2b"),
            corner_radius=10
        )
        form_frame.pack(fill="both", padx=100, pady=50)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
        ctk.CTkLabel(
            form_frame,
            text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞",
            font=ctk.CTkFont(size=20, weight="bold")
        ).pack(pady=(30, 20))
        
        # –ü–æ–ª—è —Ñ–æ—Ä–º—ã
        fields_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        fields_frame.pack(padx=50, pady=20)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        ctk.CTkLabel(
            fields_frame,
            text="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞",
            font=ctk.CTkFont(size=12),
            anchor="w"
        ).pack(fill="x", pady=(0, 5))
        
        self.server_name_entry = ctk.CTkEntry(
            fields_frame,
            placeholder_text="–ù–∞–ø—Ä–∏–º–µ—Ä: Production Server",
            width=400,
            height=40,
            font=ctk.CTkFont(size=13)
        )
        self.server_name_entry.pack(pady=(0, 15))
        
        # IP –∞–¥—Ä–µ—Å
        ctk.CTkLabel(
            fields_frame,
            text="IP –∞–¥—Ä–µ—Å",
            font=ctk.CTkFont(size=12),
            anchor="w"
        ).pack(fill="x", pady=(0, 5))
        
        self.server_ip_entry = ctk.CTkEntry(
            fields_frame,
            placeholder_text="192.168.1.100",
            width=400,
            height=40,
            font=ctk.CTkFont(size=13)
        )
        self.server_ip_entry.pack(pady=(0, 15))
        
        # SSH –ø–æ—Ä—Ç
        ctk.CTkLabel(
            fields_frame,
            text="SSH –ø–æ—Ä—Ç",
            font=ctk.CTkFont(size=12),
            anchor="w"
        ).pack(fill="x", pady=(0, 5))
        
        self.server_port_entry = ctk.CTkEntry(
            fields_frame,
            placeholder_text="22",
            width=400,
            height=40,
            font=ctk.CTkFont(size=13)
        )
        self.server_port_entry.pack(pady=(0, 15))
        self.server_port_entry.insert(0, "22")
        
        # SSH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ctk.CTkLabel(
            fields_frame,
            text="SSH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            font=ctk.CTkFont(size=12),
            anchor="w"
        ).pack(fill="x", pady=(0, 5))
        
        self.server_user_entry = ctk.CTkEntry(
            fields_frame,
            placeholder_text="root",
            width=400,
            height=40,
            font=ctk.CTkFont(size=13)
        )
        self.server_user_entry.pack(pady=(0, 15))
        self.server_user_entry.insert(0, "root")
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        buttons_frame.pack(pady=(10, 30))
        
        ctk.CTkButton(
            buttons_frame,
            text="–û—Ç–º–µ–Ω–∞",
            width=120,
            height=40,
            fg_color="transparent",
            border_width=1,
            text_color=("#000000", "#ffffff"),
            border_color=("#e0e0e0", "#404040"),
            hover_color=("#f0f0f0", "#333333"),
            command=self.show_servers_tab
        ).pack(side="left", padx=5)
        
        ctk.CTkButton(
            buttons_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
            width=150,
            height=40,
            font=ctk.CTkFont(size=13, weight="bold"),
            command=self.add_server
        ).pack(side="left", padx=5)
    
    def show_cloudflare_tab(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ Cloudflare"""
        self.clear_tab_container()
        self.page_title.configure(text="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cloudflare")
        self.current_tab = "cloudflare"
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Cloudflare
        cf_frame = ctk.CTkFrame(
            self.tab_container,
            fg_color=("#ffffff", "#2b2b2b"),
            corner_radius=10
        )
        cf_frame.pack(fill="both", expand=True, padx=50, pady=30)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(
            cf_frame,
            text="‚òÅÔ∏è",
            font=ctk.CTkFont(size=64)
        ).pack(pady=(40, 20))
        
        ctk.CTkLabel(
            cf_frame,
            text="Cloudflare DNS Management",
            font=ctk.CTkFont(size=24, weight="bold")
        ).pack()
        
        ctk.CTkLabel(
            cf_frame,
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DNS –∑–∞–ø–∏—Å—è–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Cloudflare",
            font=ctk.CTkFont(size=14),
            text_color=("#666666", "#aaaaaa")
        ).pack(pady=(10, 30))
        
        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        api_frame = ctk.CTkFrame(cf_frame, fg_color="transparent")
        api_frame.pack(padx=100, pady=20)
        
        ctk.CTkLabel(
            api_frame,
            text="API Token",
            font=ctk.CTkFont(size=12),
            anchor="w"
        ).pack(fill="x", pady=(0, 5))
        
        api_entry = ctk.CTkEntry(
            api_frame,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Cloudflare API Token",
            width=400,
            height=40,
            show="*"
        )
        api_entry.pack(pady=(0, 15))
        
        ctk.CTkButton(
            api_frame,
            text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å Cloudflare",
            width=200,
            height=40,
            fg_color=("#ff9800", "#f57c00"),
            hover_color=("#f57c00", "#e65100")
        ).pack()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = ctk.CTkLabel(
            cf_frame,
            text="‚ö†Ô∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Cloudflare –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
            font=ctk.CTkFont(size=12),
            text_color=("#ff9800", "#ffa726")
        )
        info_label.pack(pady=(30, 20))
    
    def show_settings_tab(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.clear_tab_container()
        self.page_title.configure(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        self.current_tab = "settings"
        
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        scrollable = ctk.CTkScrollableFrame(
            self.tab_container,
            fg_color="transparent"
        )
        scrollable.pack(fill="both", expand=True)
        
        # –°–µ–∫—Ü–∏—è SSH
        ssh_section = self._create_settings_section(
            scrollable,
            "SSH –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        )
        
        ssh_timeout = ctk.CTkEntry(ssh_section, placeholder_text="30 —Å–µ–∫—É–Ω–¥")
        self._add_setting_field(ssh_section, "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", ssh_timeout)
        
        ssh_port = ctk.CTkEntry(ssh_section, placeholder_text="22")
        self._add_setting_field(ssh_section, "–ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", ssh_port)
        
        # –°–µ–∫—Ü–∏—è FastPanel
        fp_section = self._create_settings_section(
            scrollable,
            "FastPanel",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        )
        
        fp_url = ctk.CTkEntry(fp_section, placeholder_text="http://fastpanel.direct/install_ru.sh")
        self._add_setting_field(fp_section, "URL —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞", fp_url)
        
        fp_port = ctk.CTkEntry(fp_section, placeholder_text="8888")
        self._add_setting_field(fp_section, "–ü–æ—Ä—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", fp_port)
        
        # –°–µ–∫—Ü–∏—è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        security_section = self._create_settings_section(
            scrollable,
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"
        )
        
        encryption_switch = ctk.CTkSwitch(
            security_section,
            text="–®–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏",
            font=ctk.CTkFont(size=12)
        )
        encryption_switch.pack(pady=10, padx=20, anchor="w")
        
        # –°–µ–∫—Ü–∏—è –í–Ω–µ—à–Ω–∏–π –≤–∏–¥
        appearance_section = self._create_settings_section(
            scrollable,
            "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥",
            "–¢–µ–º–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"
        )
        
        theme_frame = ctk.CTkFrame(appearance_section, fg_color="transparent")
        theme_frame.pack(fill="x", padx=20, pady=10)
        
        ctk.CTkLabel(
            theme_frame,
            text="–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            font=ctk.CTkFont(size=12)
        ).pack(side="left", padx=(0, 20))
        
        theme_menu = ctk.CTkOptionMenu(
            theme_frame,
            values=["–¢–µ–º–Ω–∞—è", "–°–≤–µ—Ç–ª–∞—è", "–°–∏—Å—Ç–µ–º–Ω–∞—è"],
            width=150
        )
        theme_menu.pack(side="left")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = ctk.CTkButton(
            scrollable,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            width=200,
            height=40,
            font=ctk.CTkFont(size=13, weight="bold")
        )
        save_btn.pack(pady=30)
    
    def show_monitoring_tab(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.clear_tab_container()
        self.page_title.configure(text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        self.current_tab = "monitoring"
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_frame = ctk.CTkFrame(
            self.tab_container,
            fg_color="transparent"
        )
        monitor_frame.pack(fill="both", expand=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ctk.CTkFrame(
            monitor_frame,
            fg_color=("#ffffff", "#2b2b2b"),
            corner_radius=10
        )
        stats_frame.pack(fill="x", pady=(0, 20))
        
        stats_container = ctk.CTkFrame(stats_frame, fg_color="transparent")
        stats_container.pack(padx=30, pady=20)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = [
            ("–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤", len(self.servers), "#2196f3"),
            ("–° FastPanel", sum(1 for s in self.servers if s.get("fastpanel_installed")), "#4caf50"),
            ("–ê–∫—Ç–∏–≤–Ω—ã–µ", "N/A", "#ff9800"),
            ("–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è", "0", "#f44336")
        ]
        
        for title, value, color in stats:
            stat_card = ctk.CTkFrame(
                stats_container,
                width=200,
                height=100,
                fg_color=("#f5f5f5", "#1a1a1a"),
                corner_radius=8
            )
            stat_card.pack(side="left", padx=10)
            stat_card.pack_propagate(False)
            
            card_content = ctk.CTkFrame(stat_card, fg_color="transparent")
            card_content.pack(expand=True)
            
            ctk.CTkLabel(
                card_content,
                text=str(value),
                font=ctk.CTkFont(size=32, weight="bold"),
                text_color=color
            ).pack()
            
            ctk.CTkLabel(
                card_content,
                text=title,
                font=ctk.CTkFont(size=12),
                text_color=("#666666", "#aaaaaa")
            ).pack()
        
        # –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        chart_frame = ctk.CTkFrame(
            monitor_frame,
            fg_color=("#ffffff", "#2b2b2b"),
            corner_radius=10,
            height=300
        )
        chart_frame.pack(fill="both", expand=True)
        chart_frame.pack_propagate(False)
        
        ctk.CTkLabel(
            chart_frame,
            text="üìä –ì—Ä–∞—Ñ–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
            font=ctk.CTkFont(size=16),
            text_color=("#666666", "#aaaaaa")
        ).pack(expand=True)
    
    def show_logs_tab(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤"""
        self.clear_tab_container()
        self.page_title.configure(text="–ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π")
        self.current_tab = "logs"
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        logs_frame = ctk.CTkFrame(
            self.tab_container,
            fg_color=("#ffffff", "#2b2b2b"),
            corner_radius=10
        )
        logs_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_frame = ctk.CTkFrame(logs_frame, fg_color="transparent")
        filter_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        ctk.CTkLabel(
            filter_frame,
            text="–§–∏–ª—å—Ç—Ä—ã:",
            font=ctk.CTkFont(size=12)
        ).pack(side="left", padx=(0, 10))
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é
        level_menu = ctk.CTkOptionMenu(
            filter_frame,
            values=["–í—Å–µ", "Info", "Warning", "Error"],
            width=100
        )
        level_menu.pack(side="left", padx=5)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        date_menu = ctk.CTkOptionMenu(
            filter_frame,
            values=["–°–µ–≥–æ–¥–Ω—è", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "–í—Å–µ"],
            width=150
        )
        date_menu.pack(side="left", padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        ctk.CTkButton(
            filter_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏",
            width=100,
            height=28,
            fg_color=("#f44336", "#d32f2f"),
            hover_color=("#da190b", "#b71c1c")
        ).pack(side="right")
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        logs_text = ctk.CTkTextbox(
            logs_frame,
            font=ctk.CTkFont(family="Courier", size=11),
            fg_color=("#1e1e1e", "#0a0a0a"),
            text_color=("#00ff00", "#00ff00"),
            corner_radius=5
        )
        logs_text.pack(fill="both", expand=True, padx=20, pady=(10, 20))
        
        # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–æ–≤
        sample_logs = """[2024-01-15 10:23:45] INFO: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ
[2024-01-15 10:23:46] INFO: –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ (3 —à—Ç.)
[2024-01-15 10:24:12] INFO: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É 192.168.1.100
[2024-01-15 10:24:13] SUCCESS: –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ SSH
[2024-01-15 10:24:15] INFO: –ù–∞—á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ FastPanel
[2024-01-15 10:28:43] SUCCESS: FastPanel —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
[2024-01-15 10:28:44] INFO: –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
[2024-01-15 10:30:21] WARNING: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É 192.168.1.101
[2024-01-15 10:30:22] ERROR: SSH timeout –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥
[2024-01-15 10:31:05] INFO: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...
[2024-01-15 10:31:36] SUCCESS: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
[2024-01-15 10:32:11] INFO: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–∞–π—Ç: example.com
[2024-01-15 10:32:12] INFO: DNS –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Cloudflare
"""
        logs_text.insert("1.0", sample_logs)
        logs_text.configure(state="disabled")

    def _create_settings_section(self, parent, title, description):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        section = ctk.CTkFrame(
            parent,
            fg_color=("#ffffff", "#2b2b2b"),
            corner_radius=10
        )
        section.pack(fill="x", pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        header_frame = ctk.CTkFrame(section, fg_color="transparent")
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        
        ctk.CTkLabel(
            header_frame,
            text=title,
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w")
        
        ctk.CTkLabel(
            header_frame,
            text=description,
            font=ctk.CTkFont(size=11),
            text_color=("#666666", "#aaaaaa")
        ).pack(anchor="w", pady=(2, 0))
        
        return section
    
    def _add_setting_field(self, parent, label, widget):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        field_frame = ctk.CTkFrame(parent, fg_color="transparent")
        field_frame.pack(fill="x", padx=20, pady=8)
        
        ctk.CTkLabel(
            field_frame,
            text=label,
            font=ctk.CTkFont(size=12),
            width=150,
            anchor="w"
        ).pack(side="left")
        
        widget.configure(width=250)
        widget.pack(side="left", padx=(20, 0))
    
    def clear_tab_container(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤–∫–ª–∞–¥–æ–∫"""
        for widget in self.tab_container.winfo_children():
            widget.destroy()
    
    def handle_server_action(self, action, server_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
        if action == "manage":
            self.show_server_management(server_data)
        elif action == "install":
            self.show_install_dialog(server_data)
        elif action == "open_panel":
            import webbrowser
            if server_data.get("admin_url"):
                webbrowser.open(server_data["admin_url"])
        elif action == "delete":
            self.confirm_delete_server(server_data)
    
    def show_server_management(self, server_data):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        manage_window = ctk.CTkToplevel(self)
        manage_window.title(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {server_data['name']}")
        manage_window.geometry("800x600")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        manage_window.update_idletasks()
        x = (manage_window.winfo_screenwidth() // 2) - 400
        y = (manage_window.winfo_screenheight() // 2) - 300
        manage_window.geometry(f"800x600+{x}+{y}")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ctk.CTkFrame(manage_window, fg_color="transparent")
        header.pack(fill="x", padx=20, pady=20)
        
        ctk.CTkLabel(
            header,
            text=f"üñ•Ô∏è {server_data['name']}",
            font=ctk.CTkFont(size=24, weight="bold")
        ).pack(anchor="w")
        
        ctk.CTkLabel(
            header,
            text=f"IP: {server_data['ip']} | –°—Ç–∞—Ç—É—Å: {'‚úÖ FastPanel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if server_data.get('fastpanel_installed') else '‚è≥ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}",
            font=ctk.CTkFont(size=12),
            text_color=("#666666", "#aaaaaa")
        ).pack(anchor="w", pady=(5, 0))
        
        # –¢–∞–±—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        tabview = ctk.CTkTabview(manage_window)
        tabview.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        # –í–∫–ª–∞–¥–∫–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        info_tab = tabview.add("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        self._create_server_info_tab(info_tab, server_data)
        
        # –í–∫–ª–∞–¥–∫–∞ "–°–∞–π—Ç—ã"
        sites_tab = tabview.add("–°–∞–π—Ç—ã")
        self._create_sites_tab(sites_tab, server_data)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        db_tab = tabview.add("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        self._create_databases_tab(db_tab, server_data)
        
        # –í–∫–ª–∞–¥–∫–∞ "SSH –¢–µ—Ä–º–∏–Ω–∞–ª"
        terminal_tab = tabview.add("SSH –¢–µ—Ä–º–∏–Ω–∞–ª")
        self._create_terminal_tab(terminal_tab, server_data)

    def show_install_dialog(self, server_data):
        """–î–∏–∞–ª–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FastPanel"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ FastPanel")
        dialog.geometry("500x400")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - 250
        y = (dialog.winfo_screenheight() // 2) - 200
        dialog.geometry(f"500x400+{x}+{y}")
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content = ctk.CTkFrame(dialog, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=30, pady=30)
        
        ctk.CTkLabel(
            content,
            text="üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ FastPanel",
            font=ctk.CTkFont(size=20, weight="bold")
        ).pack(pady=(0, 20))
        
        ctk.CTkLabel(
            content,
            text=f"–°–µ—Ä–≤–µ—Ä: {server_data['name']} ({server_data['ip']})",
            font=ctk.CTkFont(size=12)
        ).pack(pady=(0, 20))
        
        # –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è
        ctk.CTkLabel(
            content,
            text="SSH –ø–∞—Ä–æ–ª—å:",
            font=ctk.CTkFont(size=12),
            anchor="w"
        ).pack(fill="x", pady=(0, 5))
        
        password_entry = ctk.CTkEntry(
            content,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ SSH –ø–∞—Ä–æ–ª—å",
            show="*",
            height=40
        )
        password_entry.pack(fill="x", pady=(0, 20))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        dialog.progress = ctk.CTkProgressBar(content)
        dialog.progress.pack(fill="x", pady=10)
        dialog.progress.set(0)
        
        # –õ–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        dialog.log_text = ctk.CTkTextbox(
            content,
            height=150,
            font=ctk.CTkFont(size=10)
        )
        dialog.log_text.pack(fill="both", expand=True, pady=(10, 20))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ctk.CTkFrame(content, fg_color="transparent")
        buttons_frame.pack(fill="x")
        
        cancel_btn = ctk.CTkButton(
            buttons_frame,
            text="–û—Ç–º–µ–Ω–∞",
            width=100,
            fg_color="transparent",
            border_width=1,
            text_color=("#000000", "#ffffff"),
            border_color=("#e0e0e0", "#404040"),
            command=dialog.destroy
        )
        cancel_btn.pack(side="left", padx=(0, 10))
        
        install_btn = ctk.CTkButton(
            buttons_frame,
            text="–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É",
            width=150,
            command=lambda: self.start_installation(server_data, password_entry.get(), dialog)
        )
        install_btn.pack(side="left")

    def confirm_delete_server(self, server_data):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
        dialog.geometry("400x200")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - 200
        y = (dialog.winfo_screenheight() // 2) - 100
        dialog.geometry(f"400x200+{x}+{y}")
        
        content = ctk.CTkFrame(dialog, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=30, pady=30)
        
        ctk.CTkLabel(
            content,
            text="‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=("#f44336", "#f44336")
        ).pack(pady=(0, 20))
        
        ctk.CTkLabel(
            content,
            text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n{server_data['name']} ({server_data['ip']})?",
            font=ctk.CTkFont(size=12)
        ).pack(pady=(0, 30))
        
        buttons_frame = ctk.CTkFrame(content, fg_color="transparent")
        buttons_frame.pack()
        
        ctk.CTkButton(
            buttons_frame,
            text="–û—Ç–º–µ–Ω–∞",
            width=100,
            fg_color="transparent",
            border_width=1,
            text_color=("#000000", "#ffffff"),
            border_color=("#e0e0e0", "#404040"),
            command=dialog.destroy
        ).pack(side="left", padx=(0, 10))
        
        ctk.CTkButton(
            buttons_frame,
            text="–£–¥–∞–ª–∏—Ç—å",
            width=100,
            fg_color=("#f44336", "#d32f2f"),
            hover_color=("#da190b", "#b71c1c"),
            command=lambda: self.delete_server(server_data, dialog)
        ).pack(side="left")
    
    def show_password(self, password):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ"""
        dialog = ctk.CTkToplevel(self)
        dialog.title("–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        dialog.geometry("400x150")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - 200
        y = (dialog.winfo_screenheight() // 2) - 75
        dialog.geometry(f"400x150+{x}+{y}")
        
        content = ctk.CTkFrame(dialog, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=30, pady=30)
        
        ctk.CTkLabel(
            content,
            text="–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ FastPanel:",
            font=ctk.CTkFont(size=12)
        ).pack(pady=(0, 10))
        
        password_frame = ctk.CTkFrame(
            content,
            fg_color=("#f5f5f5", "#1a1a1a"),
            corner_radius=5
        )
        password_frame.pack(fill="x", pady=10)
        
        ctk.CTkLabel(
            password_frame,
            text=password,
            font=ctk.CTkFont(family="Courier", size=14, weight="bold")
        ).pack(padx=10, pady=10)
        
        ctk.CTkButton(
            content,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            width=100,
            command=dialog.destroy
        ).pack(pady=(10, 0))
    
    def add_server(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        import uuid
        from datetime import datetime
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π
        name = self.server_name_entry.get()
        ip = self.server_ip_entry.get()
        port = self.server_port_entry.get() or "22"
        user = self.server_user_entry.get() or "root"
        
        if not name or not ip:
            self.show_error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
        new_server = {
            "id": str(uuid.uuid4())[:8],
            "name": name,
            "ip": ip,
            "ssh_port": int(port),
            "ssh_user": user,
            "fastpanel_installed": False,
            "admin_url": None,
            "admin_password": None,
            "created_at": datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        self.servers.append(new_server)
        self.save_servers()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.show_success(f"–°–µ—Ä–≤–µ—Ä {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤
        self.show_servers_tab()
    
    def delete_server(self, server_data, dialog):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.servers = [s for s in self.servers if s["id"] != server_data["id"]]
        self.save_servers()
        dialog.destroy()
        self.show_success(f"–°–µ—Ä–≤–µ—Ä {server_data['name']} —É–¥–∞–ª–µ–Ω")
        self.show_servers_tab()
    
    def load_servers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            data_file = Path("data/servers.json")
            if data_file.exists():
                with open(data_file, 'r') as f:
                    self.servers = json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
            self.servers = []
    
    def save_servers(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            data_dir = Path("data")
            data_dir.mkdir(exist_ok=True)
            
            with open(data_dir / "servers.json", 'w') as f:
                json.dump(self.servers, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.load_servers()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
        if self.current_tab == "servers":
            self.show_servers_tab()
        
        self.show_success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    def show_success(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        self.status_label.configure(
            text=f"‚úÖ {message}",
            text_color=("#4caf50", "#4caf50")
        )
        # –°–±—Ä–æ—Å–∏—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        self.after(3000, lambda: self.status_label.configure(
            text="‚óè –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            text_color=("#4caf50", "#4caf50")
        ))
    
    def show_error(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.status_label.configure(
            text=f"‚ùå {message}",
            text_color=("#f44336", "#f44336")
        )
        # –°–±—Ä–æ—Å–∏—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        self.after(3000, lambda: self.status_label.configure(
            text="‚óè –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            text_color=("#4caf50", "#4caf50")
        ))
