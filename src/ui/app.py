"""
FastPanel Automation GUI
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ FastPanel
"""

import customtkinter as ctk
from typing import Optional, Dict, List
import json
from pathlib import Path
from datetime import datetime
import threading
from PIL import Image
import os
import sys
import uuid
import webbrowser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class ServerCard(ctk.CTkFrame):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"""

    def __init__(self, parent, server_data: dict, on_click=None, **kwargs):
        super().__init__(parent, **kwargs)

        self.server_data = server_data
        self.on_click = on_click

        self.configure(
            corner_radius=10,
            fg_color=("#ffffff", "#2b2b2b"),
            border_width=1,
            border_color=("#e0e0e0", "#404040")
        )

        self._create_widgets()

    def _create_widgets(self):
        main_frame = ctk.CTkFrame(self, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=15, pady=12)

        top_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        top_frame.pack(fill="x", pady=(0, 8))

        server_icon = ctk.CTkLabel(top_frame, text="üñ•Ô∏è", font=ctk.CTkFont(size=24))
        server_icon.pack(side="left", padx=(0, 10))

        info_frame = ctk.CTkFrame(top_frame, fg_color="transparent")
        info_frame.pack(side="left", fill="x", expand=True)

        name_label = ctk.CTkLabel(info_frame, text=self.server_data.get("name", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"), font=ctk.CTkFont(size=16, weight="bold"), anchor="w")
        name_label.pack(fill="x")

        ip_label = ctk.CTkLabel(info_frame, text=f"IP: {self.server_data.get('ip', '–ù–µ —É–∫–∞–∑–∞–Ω')}", font=ctk.CTkFont(size=12), text_color=("#666666", "#aaaaaa"), anchor="w")
        ip_label.pack(fill="x")

        status_frame = ctk.CTkFrame(top_frame, fg_color="transparent")
        status_frame.pack(side="right")

        if self.server_data.get("fastpanel_installed"):
            status_badge = ctk.CTkLabel(status_frame, text="‚úÖ FastPanel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", font=ctk.CTkFont(size=11), fg_color=("#4caf50", "#2e7d32"), corner_radius=5, text_color="white")
            status_badge.pack(padx=8, pady=4)
        else:
            status_badge = ctk.CTkLabel(status_frame, text="‚è≥ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", font=ctk.CTkFont(size=11), fg_color=("#ff9800", "#f57c00"), corner_radius=5, text_color="white")
            status_badge.pack(padx=8, pady=4)

        separator = ctk.CTkFrame(main_frame, height=1, fg_color=("#e0e0e0", "#404040"))
        separator.pack(fill="x", pady=8)

        bottom_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        bottom_frame.pack(fill="x")

        if self.server_data.get("fastpanel_installed"):
            manage_btn = ctk.CTkButton(bottom_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", width=100, height=28, font=ctk.CTkFont(size=12), command=lambda: self._on_manage())
            manage_btn.pack(side="left", padx=(0, 5))
            panel_btn = ctk.CTkButton(bottom_frame, text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å", width=100, height=28, font=ctk.CTkFont(size=12), fg_color=("#4caf50", "#2e7d32"), hover_color=("#45a049", "#1b5e20"), command=lambda: self._open_panel())
            panel_btn.pack(side="left", padx=5)
        else:
            install_btn = ctk.CTkButton(bottom_frame, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FastPanel", width=150, height=28, font=ctk.CTkFont(size=12), fg_color=("#2196f3", "#1976d2"), hover_color=("#1976d2", "#1565c0"), command=lambda: self._on_install())
            install_btn.pack(side="left")

        delete_btn = ctk.CTkButton(bottom_frame, text="üóëÔ∏è", width=30, height=28, fg_color=("#f44336", "#d32f2f"), hover_color=("#da190b", "#b71c1c"), command=lambda: self._on_delete())
        delete_btn.pack(side="right")

        edit_btn = ctk.CTkButton(bottom_frame, text="‚úèÔ∏è", width=30, height=28, command=lambda: self._on_edit())
        edit_btn.pack(side="right", padx=5)


    def _on_manage(self):
        if self.on_click: self.on_click("manage", self.server_data)

    def _on_install(self):
        if self.on_click: self.on_click("install", self.server_data)

    def _open_panel(self):
        if self.on_click: self.on_click("open_panel", self.server_data)

    def _on_delete(self):
        if self.on_click: self.on_click("delete", self.server_data)

    def _on_edit(self):
        if self.on_click: self.on_click("edit", self.server_data)

class FastPanelApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("FastPanel Automation")
        self.geometry("1200x700")
        self.minsize(1000, 600)
        self.center_window()

        self.servers = []
        self.domains = []
        self.logs = []
        self.current_tab = "servers"

        self.log_action("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

        self._create_widgets()
        self.load_servers()
        self.load_domains()
        
        self._update_server_list() # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤

        if sys.platform == "darwin" and os.path.exists("assets/icon.icns"):
            self.iconbitmap("assets/icon.icns")

    def center_window(self):
        self.update_idletasks()
        width, height = 1200, 700
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f'{width}x{height}+{x}+{y}')

    def _create_widgets(self):
        main_container = ctk.CTkFrame(self, fg_color="transparent")
        main_container.pack(fill="both", expand=True)

        self._create_sidebar(main_container)

        self.content_frame = ctk.CTkFrame(main_container, fg_color=("#f5f5f5", "#1a1a1a"), corner_radius=0)
        self.content_frame.pack(side="right", fill="both", expand=True)

        self._create_header()

        self.tab_container = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        self.tab_container.pack(fill="both", expand=True, padx=20, pady=(0, 20))

        self.show_servers_tab()

    def _create_sidebar(self, parent):
        self.sidebar = ctk.CTkFrame(parent, width=250, fg_color=("#ffffff", "#2b2b2b"), corner_radius=0)
        self.sidebar.pack(side="left", fill="y")
        self.sidebar.pack_propagate(False)

        logo_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        logo_frame.pack(fill="x", padx=20, pady=20)

        ctk.CTkLabel(logo_frame, text="üöÄ FastPanel", font=ctk.CTkFont(size=24, weight="bold")).pack()
        ctk.CTkLabel(logo_frame, text="Automation Tool", font=ctk.CTkFont(size=12), text_color=("#666666", "#aaaaaa")).pack()

        ctk.CTkFrame(self.sidebar, height=2, fg_color=("#e0e0e0", "#404040")).pack(fill="x", padx=20, pady=10)

        nav_buttons = [
            ("üñ•Ô∏è", "–°–µ—Ä–≤–µ—Ä—ã", self.show_servers_tab),
            ("üåê", "–î–æ–º–µ–Ω—ã", self.show_domain_tab),
            ("‚òÅÔ∏è", "Cloudflare", self.show_cloudflare_tab),
            ("üîß", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.show_settings_tab),
            ("üìä", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", self.show_monitoring_tab),
            ("üìù", "–õ–æ–≥–∏", self.show_logs_tab),
            ("üìã", "–†–µ–∑—É–ª—å—Ç–∞—Ç", self.show_result_tab),
        ]

        for icon, text, command in nav_buttons:
            ctk.CTkButton(self.sidebar, text=f"{icon}  {text}", font=ctk.CTkFont(size=14), height=40, fg_color="transparent", text_color=("#000000", "#ffffff"), hover_color=("#e0e0e0", "#404040"), anchor="w", command=command).pack(fill="x", padx=15, pady=2)

        info_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        info_frame.pack(side="bottom", fill="x", padx=20, pady=20)
        ctk.CTkLabel(info_frame, text="Version 0.2.2", font=ctk.CTkFont(size=10), text_color=("#999999", "#666666")).pack()
        self.status_label = ctk.CTkLabel(info_frame, text="‚óè –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", font=ctk.CTkFont(size=11), text_color=("#4caf50", "#4caf50"))
        self.status_label.pack(pady=(5, 0))

    def _create_header(self):
        header_frame = ctk.CTkFrame(self.content_frame, height=80, fg_color="transparent")
        header_frame.pack(fill="x", padx=20, pady=(20, 10))
        header_frame.pack_propagate(False)

        self.page_title = ctk.CTkLabel(header_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", font=ctk.CTkFont(size=28, weight="bold"))
        self.page_title.pack(side="left")

        ctk.CTkButton(header_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", width=100, height=32, font=ctk.CTkFont(size=12), fg_color=("#2196f3", "#1976d2"), hover_color=("#1976d2", "#1565c0"), command=self.refresh_data).pack(side="right", padx=(10, 0))
        
        self.search_entry = ctk.CTkEntry(header_frame, placeholder_text="üîç –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤...", width=250, height=32, font=ctk.CTkFont(size=12))
        self.search_entry.pack(side="right", padx=10)
        self.search_entry.bind("<KeyRelease>", self._update_server_list)

    def show_servers_tab(self):
        self.clear_tab_container()
        self.page_title.configure(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏")
        self.current_tab = "servers"

        top_panel = ctk.CTkFrame(self.tab_container, fg_color="transparent")
        top_panel.pack(fill="x", pady=(0, 10))
        ctk.CTkButton(top_panel, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", font=ctk.CTkFont(size=14, weight="bold"), width=200, height=40, command=self.show_add_server_tab, fg_color="#2196f3", hover_color="#1976d2").pack(side="left")

        self.scrollable_servers = ctk.CTkScrollableFrame(self.tab_container, fg_color="transparent")
        self.scrollable_servers.pack(fill="both", expand=True)

        self._update_server_list()

    def _update_server_list(self, event=None):
        if not hasattr(self, 'scrollable_servers'): return # –í—ã—Ö–æ–¥ –µ—Å–ª–∏ –≤–∏–¥–∂–µ—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        for widget in self.scrollable_servers.winfo_children():
            widget.destroy()

        search_query = self.search_entry.get().lower()
        sorted_servers = sorted(self.servers, key=lambda s: s.get('created_at', ''), reverse=True)
        filtered_servers = [s for s in sorted_servers if search_query in s.get("name", "").lower() or search_query in s.get("ip", "").lower()]

        if not filtered_servers:
            empty_frame = ctk.CTkFrame(self.scrollable_servers, fg_color="transparent")
            empty_frame.pack(expand=True, pady=50)
            ctk.CTkLabel(empty_frame, text="üì≠", font=ctk.CTkFont(size=64)).pack()
            ctk.CTkLabel(empty_frame, text="–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤", font=ctk.CTkFont(size=18, weight="bold")).pack(pady=(20, 10))
            ctk.CTkLabel(empty_frame, text="–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", font=ctk.CTkFont(size=14), text_color=("#666666", "#aaaaaa")).pack()
        else:
            for server in filtered_servers:
                ServerCard(self.scrollable_servers, server, on_click=self.handle_server_action).pack(fill="x", pady=5)

    def show_add_server_tab(self, server_data=None):
        self.clear_tab_container()
        is_editing = server_data is not None
        self.page_title.configure(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞" if is_editing else "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        self.current_tab = "add_server"

        scrollable_form = ctk.CTkScrollableFrame(self.tab_container, fg_color="transparent")
        scrollable_form.pack(fill="both", expand=True)

        form_frame = ctk.CTkFrame(scrollable_form, fg_color=("#ffffff", "#2b2b2b"), corner_radius=10)
        form_frame.pack(fill="both", expand=True, padx=100, pady=50)

        ctk.CTkLabel(form_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞", font=ctk.CTkFont(size=20, weight="bold")).pack(pady=(30, 20))
        
        server_type_var = ctk.StringVar(value="new")
        if is_editing:
            server_type = "existing" if server_data.get("fastpanel_installed") else "new"
            server_type_var.set(server_type)

        radio_frame = ctk.CTkFrame(form_frame, fg_color="transparent")
        radio_frame.pack(pady=10)

        new_radio = ctk.CTkRadioButton(radio_frame, text="–ù–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞", variable=server_type_var, value="new", command=lambda: self.toggle_server_form(server_type_var.get(), form_frame, server_data if server_type_var.get() == "new" else None))
        new_radio.pack(side="left", padx=10)

        existing_radio = ctk.CTkRadioButton(radio_frame, text="–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π FastPanel", variable=server_type_var, value="existing", command=lambda: self.toggle_server_form(server_type_var.get(), form_frame, server_data if server_type_var.get() == "existing" else None))
        existing_radio.pack(side="left", padx=10)

        if is_editing:
             new_radio.configure(state="disabled")
             existing_radio.configure(state="disabled")

        self.toggle_server_form(server_type_var.get(), form_frame, server_data)

    def toggle_server_form(self, server_type, parent_frame, server_data=None):
        if hasattr(self, "fields_frame"): self.fields_frame.destroy()
        if hasattr(self, "buttons_frame"): self.buttons_frame.destroy()

        self.fields_frame = ctk.CTkFrame(parent_frame, fg_color="transparent")
        self.fields_frame.pack(padx=50, pady=20, fill="x", expand=True)

        if server_type == "new":
            self.create_new_server_form(self.fields_frame, server_data)
        else:
            self.create_existing_server_form(self.fields_frame, server_data)

        self.buttons_frame = ctk.CTkFrame(parent_frame, fg_color="transparent")
        self.buttons_frame.pack(pady=(10, 30))

        ctk.CTkButton(self.buttons_frame, text="–û—Ç–º–µ–Ω–∞", width=120, height=40, fg_color="transparent", border_width=1, text_color=("#000000", "#ffffff"), border_color=("#e0e0e0", "#404040"), hover_color=("#f0f0f0", "#333333"), command=self.show_servers_tab).pack(side="left", padx=5)
        ctk.CTkButton(self.buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", width=150, height=40, font=ctk.CTkFont(size=13, weight="bold"), command=lambda: self.add_or_update_server(server_type, server_data)).pack(side="left", padx=5)


    def create_new_server_form(self, parent, data=None):
        ctk.CTkLabel(parent, text="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞", font=ctk.CTkFont(size=12), anchor="w").pack(fill="x", pady=(0, 5))
        self.server_name_entry = ctk.CTkEntry(parent, width=400, height=40)
        self.server_name_entry.pack(pady=(0, 15), fill="x", expand=True)
        if data: self.server_name_entry.insert(0, data.get("name", ""))

        ctk.CTkLabel(parent, text="IP –∞–¥—Ä–µ—Å", font=ctk.CTkFont(size=12), anchor="w").pack(fill="x", pady=(0, 5))
        self.server_ip_entry = ctk.CTkEntry(parent, width=400, height=40)
        self.server_ip_entry.pack(pady=(0, 15), fill="x", expand=True)
        if data: self.server_ip_entry.insert(0, data.get("ip", ""))

        ctk.CTkLabel(parent, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", font=ctk.CTkFont(size=12), anchor="w").pack(fill="x", pady=(0, 5))
        self.server_user_entry = ctk.CTkEntry(parent, width=400, height=40)
        self.server_user_entry.pack(pady=(0, 15), fill="x", expand=True)
        self.server_user_entry.insert(0, data.get("ssh_user", "root") if data else "root")

        ctk.CTkLabel(parent, text="–ü–∞—Ä–æ–ª—å", font=ctk.CTkFont(size=12), anchor="w").pack(fill="x", pady=(0, 5))
        self.server_password_entry = ctk.CTkEntry(parent, width=400, height=40, show="*")
        self.server_password_entry.pack(pady=(0, 15), fill="x", expand=True)
        if data: self.server_password_entry.insert(0, data.get("password", ""))

        ctk.CTkLabel(parent, text="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)", font=ctk.CTkFont(size=12), anchor="w").pack(fill="x", pady=(0, 5))
        self.server_expiration_entry = ctk.CTkEntry(parent, width=400, height=40)
        self.server_expiration_entry.pack(pady=(0, 15), fill="x", expand=True)
        if data: self.server_expiration_entry.insert(0, data.get("expiration_date", ""))

    def create_existing_server_form(self, parent, data=None):
        ctk.CTkLabel(parent, text="–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞", font=ctk.CTkFont(size=12), anchor="w").pack(fill="x", pady=(0, 5))
        self.existing_server_name_entry = ctk.CTkEntry(parent, width=400, height=40)
        self.existing_server_name_entry.pack(pady=(0, 15), fill="x", expand=True)
        if data: self.existing_server_name_entry.insert(0, data.get("name", ""))

        ctk.CTkLabel(parent, text="URL –ø–∞–Ω–µ–ª–∏ (https://ip:8888)", font=ctk.CTkFont(size=12), anchor="w").pack(fill="x", pady=(0, 5))
        self.server_url_entry = ctk.CTkEntry(parent, width=400, height=40)
        self.server_url_entry.pack(pady=(0, 15), fill="x", expand=True)
        if data: self.server_url_entry.insert(0, data.get("admin_url", ""))
        
        ctk.CTkLabel(parent, text="–ü–∞—Ä–æ–ª—å", font=ctk.CTkFont(size=12), anchor="w").pack(fill="x", pady=(0, 5))
        self.fastuser_password_entry = ctk.CTkEntry(parent, width=400, height=40, show="*")
        self.fastuser_password_entry.pack(pady=(0, 15), fill="x", expand=True)
        if data: self.fastuser_password_entry.insert(0, data.get("admin_password", ""))
        
        ctk.CTkLabel(parent, text="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)", font=ctk.CTkFont(size=12), anchor="w").pack(fill="x", pady=(0, 5))
        self.existing_server_expiration_entry = ctk.CTkEntry(parent, width=400, height=40)
        self.existing_server_expiration_entry.pack(pady=(0, 15), fill="x", expand=True)
        if data: self.existing_server_expiration_entry.insert(0, data.get("expiration_date", ""))


    def show_domain_tab(self):
        self.clear_tab_container()
        self.page_title.configure(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞–º–∏")
        self.current_tab = "domain"

        top_panel = ctk.CTkFrame(self.tab_container, fg_color="transparent")
        top_panel.pack(fill="x", pady=(0, 10))
        ctk.CTkButton(top_panel, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω(-—ã)", command=self.show_add_domain_dialog).pack(side="left")

        domain_list_frame = ctk.CTkScrollableFrame(self.tab_container, fg_color="transparent")
        domain_list_frame.pack(fill="both", expand=True)

        if not self.domains:
            ctk.CTkLabel(domain_list_frame, text="–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤").pack(pady=20)
        else:
            for idx, domain_info in enumerate(self.domains):
                domain_frame = ctk.CTkFrame(domain_list_frame, fg_color=("#ffffff", "#2b2b2b"), corner_radius=8)
                domain_frame.pack(fill="x", pady=5, padx=5)
                ctk.CTkLabel(domain_frame, text=f"üåê {domain_info['domain']}", font=ctk.CTkFont(size=14, weight="bold")).pack(side="left", padx=10, pady=10)
                
                server_ips = ["(–ù–µ –≤—ã–±—Ä–∞–Ω)"] + [s['ip'] for s in self.servers if s.get('ip')]
                server_var = ctk.StringVar(value=domain_info.get("server_ip") or "(–ù–µ –≤—ã–±—Ä–∞–Ω)")
                server_menu = ctk.CTkOptionMenu(domain_frame, values=server_ips, variable=server_var, command=lambda ip, i=idx: self.update_domain_server(i, ip))
                server_menu.pack(side="right", padx=10, pady=10)
    
    def show_add_domain_dialog(self):
        dialog = ctk.CTkToplevel(self)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã")
        dialog.geometry("500x450")
        dialog.transient(self)
        dialog.grab_set()

        ctk.CTkLabel(dialog, text="–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã", font=ctk.CTkFont(size=20, weight="bold")).pack(pady=20)
        ctk.CTkLabel(dialog, text="–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):").pack()
        domain_textbox = ctk.CTkTextbox(dialog, height=200, width=400)
        domain_textbox.pack(pady=10)

        ctk.CTkButton(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=lambda: self.add_domains(domain_textbox.get("1.0", "end-1c"), dialog)).pack(pady=20)

    def add_domains(self, domains_text, dialog):
        domains = [d.strip() for d in domains_text.split("\n") if d.strip()]
        added_count = 0
        for domain in domains:
            if not any(d['domain'] == domain for d in self.domains):
                self.domains.append({"domain": domain, "server_ip": ""})
                added_count += 1
        
        if added_count > 0:
            self.log_action(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –¥–æ–º–µ–Ω–æ–≤")
            self.save_domains()
            self.show_domain_tab()

        dialog.destroy()

    def update_domain_server(self, index, server_ip):
        ip_to_save = server_ip if server_ip != "(–ù–µ –≤—ã–±—Ä–∞–Ω)" else ""
        self.domains[index]["server_ip"] = ip_to_save
        self.save_domains()
        self.log_action(f"–î–ª—è –¥–æ–º–µ–Ω–∞ {self.domains[index]['domain']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä {server_ip}")
        self.show_success(f"–°–µ—Ä–≤–µ—Ä –¥–ª—è –¥–æ–º–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    def show_result_tab(self):
        self.clear_tab_container()
        self.page_title.configure(text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        self.current_tab = "result"
        result_textbox = ctk.CTkTextbox(self.tab_container, wrap="word")
        result_textbox.pack(fill="both", expand=True)
        result_text = ""
        for server in self.servers:
            if server.get("fastpanel_installed"):
                result_text += f"{server['ip']};user{server['id']};pass{server['id']}\n"
        result_textbox.insert("1.0", result_text or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        result_textbox.configure(state="disabled")

    def show_cloudflare_tab(self):
        self.clear_tab_container()
        self.page_title.configure(text="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Cloudflare")
        self.current_tab = "cloudflare"
        ctk.CTkLabel(self.tab_container, text="–í–∫–ª–∞–¥–∫–∞ Cloudflare", font=("Arial", 24)).pack(pady=20)

    def show_settings_tab(self):
        self.clear_tab_container()
        self.page_title.configure(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.current_tab = "settings"
        ctk.CTkLabel(self.tab_container, text="–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫", font=("Arial", 24)).pack(pady=20)

    def show_monitoring_tab(self):
        self.clear_tab_container()
        self.page_title.configure(text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        self.current_tab = "monitoring"
        ctk.CTkLabel(self.tab_container, text="–í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", font=("Arial", 24)).pack(pady=20)

    def show_logs_tab(self):
        self.clear_tab_container()
        self.page_title.configure(text="–õ–æ–≥–∏")
        self.current_tab = "logs"
        
        logs_text = ctk.CTkTextbox(self.tab_container, wrap="word")
        logs_text.pack(fill="both", expand=True)
        
        logs_text.insert("1.0", "\n".join(self.logs))
        logs_text.configure(state="disabled")

    def _create_settings_section(self, parent, title, description):
        section = ctk.CTkFrame(parent, fg_color=("#ffffff", "#2b2b2b"), corner_radius=10)
        section.pack(fill="x", pady=10)
        header = ctk.CTkFrame(section, fg_color="transparent")
        header.pack(fill="x", padx=20, pady=(20, 10))
        ctk.CTkLabel(header, text=title, font=ctk.CTkFont(size=16, weight="bold")).pack(anchor="w")
        ctk.CTkLabel(header, text=description, font=ctk.CTkFont(size=11), text_color=("#666666", "#aaaaaa")).pack(anchor="w", pady=(2, 0))
        return section

    def _add_setting_field(self, parent, label, widget):
        field_frame = ctk.CTkFrame(parent, fg_color="transparent")
        field_frame.pack(fill="x", padx=20, pady=8)
        ctk.CTkLabel(field_frame, text=label, font=ctk.CTkFont(size=12), width=150, anchor="w").pack(side="left")
        widget.configure(width=250)
        widget.pack(side="left", padx=(20, 0))

    def clear_tab_container(self):
        for widget in self.tab_container.winfo_children():
            widget.destroy()

    def handle_server_action(self, action, server_data):
        actions = {
            "manage": self.show_server_management,
            "install": self.show_install_dialog,
            "open_panel": lambda s: webbrowser.open(s.get("admin_url")) if s.get("admin_url") else None,
            "delete": self.confirm_delete_server,
            "edit": self.show_add_server_tab,
        }
        if action in actions:
            actions[action](server_data)

    def show_server_management(self, server_data):
        manage_window = ctk.CTkToplevel(self)
        manage_window.title(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {server_data['name']}")
        manage_window.geometry("800x600")
        manage_window.transient(self)
        manage_window.grab_set()

        header = ctk.CTkFrame(manage_window, fg_color="transparent")
        header.pack(fill="x", padx=20, pady=20)
        ctk.CTkLabel(header, text=f"üñ•Ô∏è {server_data['name']}", font=ctk.CTkFont(size=24, weight="bold")).pack(anchor="w")
        ctk.CTkLabel(header, text=f"IP: {server_data['ip']} | –°—Ç–∞—Ç—É—Å: {'‚úÖ FastPanel —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if server_data.get('fastpanel_installed') else '‚è≥ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}", font=ctk.CTkFont(size=12), text_color=("#666666", "#aaaaaa")).pack(anchor="w", pady=(5, 0))

        tabview = ctk.CTkTabview(manage_window)
        tabview.pack(fill="both", expand=True, padx=20, pady=(0, 20))
        
        self._create_server_info_tab(tabview.add("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), server_data)
        self._create_sites_tab(tabview.add("–°–∞–π—Ç—ã"), server_data)
        self._create_databases_tab(tabview.add("–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"), server_data)
        self._create_terminal_tab(tabview.add("SSH –¢–µ—Ä–º–∏–Ω–∞–ª"), server_data)

    def _create_server_info_tab(self, parent, data):
        info_frame = ctk.CTkScrollableFrame(parent, fg_color="transparent")
        info_frame.pack(fill="both", expand=True)
        main_info = ctk.CTkFrame(info_frame, fg_color=("#ffffff", "#2b2b2b"), corner_radius=8)
        main_info.pack(fill="x", pady=10)
        info_content = ctk.CTkFrame(main_info, fg_color="transparent")
        info_content.pack(padx=20, pady=20)
        info_items = [
            ("ID", data.get("id")), ("–ù–∞–∑–≤–∞–Ω–∏–µ", data.get("name")), ("IP", data.get("ip")),
            ("SSH –ø–æ—Ä—Ç", data.get("ssh_port", 22)), ("SSH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", data.get("ssh_user")),
            ("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", data.get("created_at", "N/A")[:10])
        ]
        for label, value in info_items:
            row = ctk.CTkFrame(info_content, fg_color="transparent")
            row.pack(fill="x", pady=5)
            ctk.CTkLabel(row, text=f"{label}:", width=150, anchor="w", text_color=("#666666", "#aaaaaa")).pack(side="left")
            ctk.CTkLabel(row, text=str(value), font=ctk.CTkFont(weight="bold")).pack(side="left")
        
        if data.get("fastpanel_installed"):
            fp_info = ctk.CTkFrame(info_frame, fg_color=("#ffffff", "#2b2b2b"), corner_radius=8)
            fp_info.pack(fill="x", pady=10)
            fp_content = ctk.CTkFrame(fp_info, fg_color="transparent")
            fp_content.pack(padx=20, pady=20)
            ctk.CTkLabel(fp_content, text="FastPanel", font=ctk.CTkFont(size=14, weight="bold")).pack(anchor="w", pady=(0, 10))
            fp_items = [
                ("URL", data.get("admin_url", f"https://{data.get('ip')}:8888")),
                ("–õ–æ–≥–∏–Ω", "fastuser"),
                ("–ü–∞—Ä–æ–ª—å", "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" if data.get("admin_password") else "–ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            ]
            for label, value in fp_items:
                row = ctk.CTkFrame(fp_content, fg_color="transparent")
                row.pack(fill="x", pady=5)
                ctk.CTkLabel(row, text=f"{label}:", width=150, anchor="w", text_color=("#666666", "#aaaaaa")).pack(side="left")
                ctk.CTkLabel(row, text=str(value)).pack(side="left")


    def _create_sites_tab(self, parent, server_data):
        sites_frame = ctk.CTkFrame(parent, fg_color="transparent")
        sites_frame.pack(fill="both", expand=True)
        
        sites_list_frame = ctk.CTkScrollableFrame(sites_frame, fg_color="transparent")
        sites_list_frame.pack(fill="both", expand=True)

        server_domains = [d for d in self.domains if d.get("server_ip") == server_data.get("ip")]

        if not server_domains:
            ctk.CTkLabel(sites_list_frame, text="–ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —Å–∞–π—Ç–æ–≤").pack(pady=20)
        else:
            for domain_info in server_domains:
                site_card = ctk.CTkFrame(sites_list_frame, fg_color=("#ffffff", "#2b2b2b"), corner_radius=8)
                site_card.pack(fill="x", pady=5)
                site_content = ctk.CTkFrame(site_card, fg_color="transparent")
                site_content.pack(padx=15, pady=12, fill="x")
                
                ctk.CTkLabel(site_content, text=f"üåê {domain_info['domain']}", font=ctk.CTkFont(size=14, weight="bold")).pack(side="left", anchor="w")
                
                delete_button = ctk.CTkButton(site_content, text="üóëÔ∏è", width=30, height=28, fg_color=("#f44336", "#d32f2f"), hover_color=("#da190b", "#b71c1c"), command=lambda d=domain_info: self.delete_domain_from_server(d, server_data))
                delete_button.pack(side="right", anchor="e")


    def _create_databases_tab(self, parent, server_data):
        db_frame = ctk.CTkFrame(parent, fg_color="transparent")
        db_frame.pack(fill="both", expand=True)
        ctk.CTkLabel(db_frame, text="üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=20)
        ctk.CTkLabel(db_frame, text="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", font=ctk.CTkFont(size=12), text_color=("#666666", "#aaaaaa")).pack()

    def _create_terminal_tab(self, parent, server_data):
        terminal_frame = ctk.CTkFrame(parent, fg_color="transparent")
        terminal_frame.pack(fill="both", expand=True)
        ctk.CTkLabel(terminal_frame, text="SSH –¢–µ—Ä–º–∏–Ω–∞–ª", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=20)
        ctk.CTkLabel(terminal_frame, text="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", font=ctk.CTkFont(size=12), text_color=("#666666", "#aaaaaa")).pack()

    def show_install_dialog(self, server_data):
        dialog = ctk.CTkToplevel(self)
        dialog.title("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ FastPanel")
        dialog.geometry("600x550")
        dialog.transient(self)
        dialog.grab_set()

        content = ctk.CTkFrame(dialog, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=30, pady=30)
        ctk.CTkLabel(content, text="üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ FastPanel", font=ctk.CTkFont(size=20, weight="bold")).pack(pady=(0, 20))
        ctk.CTkLabel(content, text=f"–°–µ—Ä–≤–µ—Ä: {server_data['name']} ({server_data['ip']})", font=ctk.CTkFont(size=12)).pack(pady=(0, 20))
        
        password_entry = ctk.CTkEntry(content, placeholder_text="–í–≤–µ–¥–∏—Ç–µ SSH –ø–∞—Ä–æ–ª—å", show="*", height=40)
        password_entry.pack(fill="x", pady=(0, 20))
        if server_data.get("password"): password_entry.insert(0, server_data["password"])

        progress = ctk.CTkProgressBar(content)
        progress.pack(fill="x", pady=10)
        progress.set(0)
        log_text = ctk.CTkTextbox(content, height=150, font=ctk.CTkFont(size=10))
        log_text.pack(fill="both", expand=True, pady=(10, 20))
        buttons_frame = ctk.CTkFrame(content, fg_color="transparent")
        buttons_frame.pack(fill="x")
        ctk.CTkButton(buttons_frame, text="–û—Ç–º–µ–Ω–∞", width=100, fg_color="transparent", border_width=1, text_color=("#000000", "#ffffff"), border_color=("#e0e0e0", "#404040"), command=dialog.destroy).pack(side="left", padx=(0, 10))
        ctk.CTkButton(buttons_frame, text="–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É", width=150, command=lambda: self.start_installation(server_data, password_entry.get(), log_text, progress)).pack(side="left")

    def confirm_delete_server(self, server_data):
        dialog = ctk.CTkToplevel(self)
        dialog.title("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
        dialog.geometry("400x200")
        dialog.transient(self)
        dialog.grab_set()
        content = ctk.CTkFrame(dialog, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=30, pady=30)
        ctk.CTkLabel(content, text="‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞", font=ctk.CTkFont(size=18, weight="bold"), text_color=("#f44336", "#f44336")).pack(pady=(0, 20))
        ctk.CTkLabel(content, text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n{server_data['name']} ({server_data['ip']})?", font=ctk.CTkFont(size=12)).pack(pady=(0, 30))
        buttons_frame = ctk.CTkFrame(content, fg_color="transparent")
        buttons_frame.pack()
        ctk.CTkButton(buttons_frame, text="–û—Ç–º–µ–Ω–∞", width=100, fg_color="transparent", border_width=1, text_color=("#000000", "#ffffff"), border_color=("#e0e0e0", "#404040"), command=dialog.destroy).pack(side="left", padx=(0, 10))
        ctk.CTkButton(buttons_frame, text="–£–¥–∞–ª–∏—Ç—å", width=100, fg_color=("#f44336", "#d32f2f"), hover_color=("#da190b", "#b71c1c"), command=lambda: self.delete_server(server_data, dialog)).pack(side="left")

    def show_password(self, password):
        dialog = ctk.CTkToplevel(self)
        dialog.title("–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        dialog.geometry("400x150")
        dialog.transient(self)
        dialog.grab_set()
        content = ctk.CTkFrame(dialog, fg_color="transparent")
        content.pack(fill="both", expand=True, padx=30, pady=30)
        ctk.CTkLabel(content, text="–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ FastPanel:", font=ctk.CTkFont(size=12)).pack(pady=(0, 10))
        password_frame = ctk.CTkFrame(content, fg_color=("#f5f5f5", "#1a1a1a"), corner_radius=5)
        password_frame.pack(fill="x", pady=10)
        ctk.CTkLabel(password_frame, text=password, font=ctk.CTkFont(family="Courier", size=14, weight="bold")).pack(padx=10, pady=10)
        ctk.CTkButton(content, text="–ó–∞–∫—Ä—ã—Ç—å", width=100, command=dialog.destroy).pack(pady=(10, 0))

    def add_or_update_server(self, server_type, server_data=None):
        is_editing = server_data is not None
        
        if server_type == 'new':
            payload = {
                "name": self.server_name_entry.get(),
                "ip": self.server_ip_entry.get(),
                "ssh_user": self.server_user_entry.get() or "root",
                "password": self.server_password_entry.get(),
                "expiration_date": self.server_expiration_entry.get()
            }
            if not payload["name"] or not payload["ip"]:
                self.show_error("–ò–º—è –∏ IP –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
                return
        else: # existing
            payload = {
                "name": self.existing_server_name_entry.get(),
                "admin_url": self.server_url_entry.get(),
                "admin_password": self.fastuser_password_entry.get(),
                "expiration_date": self.existing_server_expiration_entry.get()
            }
            if not payload["admin_url"] or not payload["admin_password"]:
                self.show_error("URL –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
                return
            try:
                payload["ip"] = payload["admin_url"].split("://")[1].split(":")[0]
            except:
                self.show_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
                return
            if not payload["name"]: payload["name"] = payload["ip"]

        if is_editing:
            for i, s in enumerate(self.servers):
                if s['id'] == server_data['id']:
                    self.servers[i].update(payload)
                    break
            self.log_action(f"–°–µ—Ä–≤–µ—Ä '{payload['name']}' –æ–±–Ω–æ–≤–ª–µ–Ω")
            self.show_success(f"–°–µ—Ä–≤–µ—Ä {payload['name']} –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            payload.update({
                "id": str(uuid.uuid4())[:8],
                "fastpanel_installed": server_type == "existing",
                "created_at": datetime.now().isoformat(),
            })
            self.servers.append(payload)
            self.log_action(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: '{payload['name']}'")
            self.show_success(f"–°–µ—Ä–≤–µ—Ä {payload['name']} –¥–æ–±–∞–≤–ª–µ–Ω")

        self.save_servers()
        self.show_servers_tab()

    def delete_server(self, server_data, dialog):
        self.servers = [s for s in self.servers if s["id"] != server_data["id"]]
        self.save_servers()
        dialog.destroy()
        self.log_action(f"–°–µ—Ä–≤–µ—Ä '{server_data['name']}' —É–¥–∞–ª–µ–Ω", level="WARNING")
        self.show_success(f"–°–µ—Ä–≤–µ—Ä {server_data['name']} —É–¥–∞–ª–µ–Ω")
        self.show_servers_tab()

    def delete_domain_from_server(self, domain, server_data):
        self.domains = [d for d in self.domains if not (d['domain'] == domain['domain'] and d['server_ip'] == domain['server_ip'])]
        self.save_domains()
        self.log_action(f"–î–æ–º–µ–Ω {domain['domain']} —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞ {server_data['name']}", level="WARNING")
        self.show_success(f"–î–æ–º–µ–Ω {domain['domain']} —É–¥–∞–ª–µ–Ω")
        self.show_server_management(server_data)

    def start_installation(self, server_data, password, log_widget, progress_widget):
        self.log_action(f"–ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FastPanel –Ω–∞ —Å–µ—Ä–≤–µ—Ä '{server_data['name']}'")
        log_widget.insert("end", "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É FastPanel...\n")
        progress_widget.set(0.1)
        # ... (–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏)

    def _complete_installation(self, server_data, log_widget, progress_widget):
        self.log_action(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ FastPanel –Ω–∞ —Å–µ—Ä–≤–µ—Ä '{server_data['name']}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞", level="SUCCESS")
        log_widget.insert("end", "\n‚úÖ FastPanel —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n")
        # ... (–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏)

    def load_servers(self):
        try:
            with open("data/servers.json", 'r', encoding='utf-8') as f: self.servers = json.load(f)
            self.log_action(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
        except (FileNotFoundError, json.JSONDecodeError): self.servers = []

    def save_servers(self):
        os.makedirs("data", exist_ok=True)
        with open("data/servers.json", 'w', encoding='utf-8') as f: json.dump(self.servers, f, indent=2, ensure_ascii=False)

    def load_domains(self):
        try:
            with open("data/domains.json", 'r', encoding='utf-8') as f: self.domains = json.load(f)
            self.log_action(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.domains)} –¥–æ–º–µ–Ω–æ–≤")
        except (FileNotFoundError, json.JSONDecodeError): self.domains = []

    def save_domains(self):
        os.makedirs("data", exist_ok=True)
        with open("data/domains.json", 'w', encoding='utf-8') as f: json.dump(self.domains, f, indent=2, ensure_ascii=False)

    def refresh_data(self):
        self.load_servers()
        self.load_domains()
        if self.current_tab == "servers": self.show_servers_tab()
        elif self.current_tab == "domain": self.show_domain_tab()
        self.log_action("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        self.show_success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
    def log_action(self, message, level="INFO"):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.logs.append(f"[{timestamp}] {level}: {message}")

    def show_success(self, message):
        self.status_label.configure(text=f"‚úÖ {message}", text_color=("#4caf50", "#4caf50"))
        self.after(3000, lambda: self.status_label.configure(text="‚óè –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", text_color=("#4caf50", "#4caf50")))

    def show_error(self, message):
        self.status_label.configure(text=f"‚ùå {message}", text_color=("#f44336", "#f44336"))
        self.log_action(message, level="ERROR")
        self.after(3000, lambda: self.status_label.configure(text="‚óè –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", text_color=("#4caf50", "#4caf50")))

if __name__ == "__main__":
    app = FastPanelApp()
    app.mainloop()
